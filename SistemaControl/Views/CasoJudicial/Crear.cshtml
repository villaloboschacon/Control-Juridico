
@model SistemaControl.Models.CasoViewModel
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1">

<script src="~/Scripts/jquery-ui-1.12.1.js"></script>
<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>

<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

<div class="modal-dialog" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <span class="modal-title" id="exampleModalLabel">Agregar nuevo proceso</span>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body">
            <div id="contenidoModal">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    int i = 0;
                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model[i].idCaso)

                        <div class="form-group">
                            @Html.LabelFor(model => model[i].idPersona, "Persona:", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model[i].idPersona, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model[i].idPersona, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model[i].idUsuario, "Abogados", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("idUsuario", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model[i].idUsuario, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model[i].idTipo, "Estado:", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("idTipo", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model[i].idTipo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model[i].tipoLitigante, "Tipo de litigante:", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("tipoLitigante", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model[i].tipoLitigante, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model[i].numeroCaso, "Numero de proceso:", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model[i].numeroCaso, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model[i].numeroCaso, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model[i].descripcion, "Descripción:", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model[i].descripcion, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model[i].descripcion, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model[i].materia, "Materia:", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model[i].materia, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model[i].materia, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model[i].descripcion, "Descripción:", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model[i].descripcion, 10, 62, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model[i].descripcion, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model[i].observacion, "Observación:", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(model => model[i].observacion, 10, 62, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model[i].observacion, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                }
                <input type="file" name="elementName" multiple="multiple" />

            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-primary"><a style="color:white;" href="/CasoJudicial/Index">Cerrar</a></button>
            <button type="button" class="btn btn-primary"><a style="color:white;" href="/CasoJudicial/Index">Guardar cambios</a></button>
        </div>
    </div>
</div>



<script type="text/javascript">
    $(document).ready(function () {

        $("#idTipo").change(function () {
            $("#idPersona").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetTipoPersona")', // we are calling json method
                dataType: 'json',
                data: { id: $("#idTipo").val() },
                success: function (origins) {
                    var another = origins.Data;
                    console.log(another[0].Value);
                    $.each(another, function (i, state) {
                        $("#idPersona").append('<option value="' + state.Value + '">' + state.Text + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        });
    });

    $('#materia').keydown(function (e) {
        var key = e.key;
        var code = e.keyCode;

        if (code >= 48 && code <= 57) { //Numeros abajo de los F
            swal("¡Carácter invalido!", 'No se permiten caracteres numéricos.', "error");
            event.preventDefault();
        } else if (code >= 96 && code <= 222) { // Numeros de la calculadora, +,-,*,/, llaves, comillas
            swal("¡Carácter invalido!", 'No se permiten caracteres numéricos.', "error");
            event.preventDefault();
        }
    });

</script>