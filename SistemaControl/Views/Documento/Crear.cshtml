@model SistemaControl.Models.DocumentoViewModel
<!doctype html>
<html lang="es">

<head>
    <meta charset="utf-8">
    <meta name="robots">
    <title>Crear Documento</title>
    <script src="https://code.jquery.com/jquery-3.4.1.js"
            integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU="
            crossorigin="anonymous"></script>
    <script src="https://cdn.ckeditor.com/4.11.4/standard-all/ckeditor.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>

    <style>
        .modal-open.ui-datepicker {
            margin: 5px auto 0;
            font: 12pt Arial, sans-serif;
        }

            .modal-open .ui-datepicker table {
                width: 100%;
                background-color: white;
            }

        .modal-open .ui-datepicker-header {
            background: #35475e;
            color: #ffffff;
            font-family: sans-serif;
            border-width: 1px 0 0 0;
            border-style: solid;
            border-color: #111;
        }

        .modal-open .ui-datepicker-title {
            text-align: center;
            font-size: 15px;
        }

        .modal-open .ui-datepicker-prev {
            float: left;
            cursor: pointer;
            background-position: center -30px;
        }

        .modal-open .ui-datepicker-next {
            float: right;
            cursor: pointer;
        }

        .modal-open .ui-datepicker select.ui-datepicker-month, .ui-datepicker select.ui-datepicker-year {
            width: 49%;
            color: black;
            font-family: sans-serif;
        }
    </style>
</head>

<body>
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <span class="modal-title" id="createModal" style="text-align:center;">Crear documento</span>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="contenidoModal">

                    @using (Html.BeginForm("CrearDocumento", "Documento"))
                    {
                        @Html.AntiForgeryToken()
                        <div class="form-horizontal" id="parent">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.idDocumento)


                            <div class="form-group">
                                @Html.LabelFor(model => model.idTipo, "Tipo de Documento", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("idTipo", null, "Seleccione una opción.", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.idTipo, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" id="tipoOrigenes">
                                @Html.LabelFor(model => model.tipoOrigen, "Tipo de origen", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("tipoOrigen", null, "Seleccione una opción.", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.tipoOrigen, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" id="origenes">
                                @Html.LabelFor(model => model.idOrigen, "Origen", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("idOrigen", null, "Seleccione una opción.", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.idOrigen, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" id="partes">
                                @Html.LabelFor(model => model.parte, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.parte, new { htmlAttributes = new { @class = "form-control", placeholder = "EXP-AD-NOMBREDELAPERSONA-2018", autocomplete = "off", style = "text-transform: uppercase;" } })
                                    @Html.ValidationMessageFor(model => model.parte, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group" id="numerosDocumentos">
                                @Html.LabelFor(model => model.numeroDocumento, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.numeroDocumento, new { htmlAttributes = new { @class = "form-control", @id = "numeroDocumento" } })
                                    @Html.ValidationMessageFor(model => model.numeroDocumento, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" id="numerosIngresos">
                                @Html.LabelFor(model => model.numeroIngreso, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.numeroIngreso, new { htmlAttributes = new { @class = "form-control", placeholder = "N.I.####-2018", autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.numeroIngreso, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group" id="idEstados">
                                @Html.LabelFor(model => model.idEstado, "Estado", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("idEstado", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.idEstado, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" id="fechas">
                                @Html.LabelFor(model => model.fecha, "Fecha", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.fecha, new { htmlAttributes = new { @type = "date", @class = "form-control datepicker" } })

                                    @Html.ValidationMessageFor(model => model.fecha, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group" id="ubicaciones">
                                @Html.LabelFor(model => model.ubicacion, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.ubicacion, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", placeholder = "La ubicación física del documento." } })
                                    @Html.ValidationMessageFor(model => model.ubicacion, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group" id="asuntos">
                                @Html.LabelFor(model => model.asunto, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.asunto, new { htmlAttributes = new { @class = "form-control", autocomplete = "off", placeholder = "Asunto" } })
                                    @Html.ValidationMessageFor(model => model.asunto, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" id="descripciones">
                                @Html.LabelFor(model => model.descripcion, htmlAttributes: new { @class = "control-label col-md-2", placeholder = "Descripción breve del documento." })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.descripcion, 5, 62, new { @class = "form-control", @style = "resize: vertical;min-height: 100px;" })
                                    @Html.ValidationMessageFor(model => model.descripcion, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group" id="observaciones">
                                @Html.LabelFor(model => model.observacion, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.observacion, 10, 62, new { @class = "form-control", @style = "resize: vertical;min-height: 200px;" })
                                    @Html.ValidationMessageFor(model => model.observacion, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group" id="textoCheck">
                                @Html.LabelFor(model => model.check, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.check, new[] { new SelectListItem { Text = "Seleccione un opción.", Value = "0" },new SelectListItem { Text = "Si", Value = "1" }, new SelectListItem { Text = "No", Value = "2" } }, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.check, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group" id="textoDocumento">
                                @Html.LabelFor(model => model.texto, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.texto, new { @id = "texto", @name = "editor1" })
                                    <br />
                                    <input id="guardarTexto" class="btn btn-default" onclick="GetContents();" type="button" value="Guardar archivo">
                                </div>
                            </div>


                            <div class="form-group" id="file">
                                <label class="control-label col-md-2">Adjuntar archivos:</label>
                                <div class="col-md-10">
                                    <input class="form-control" type="file" name="elementName" multiple="multiple" />
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" id="CrearBoton" value="Crear documento" class="btn btn-default" onclick="Save" />
                                <button type="button" class="btn btn-default" data-dismiss="modal">Cerrar</button>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>

    <script>
        // Helper function to display messages below CKEditor.
        function ShowMessage(msg) {
            document.getElementById('eMessage').innerHTML = msg;
        }
        function InsertHTML() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.texto;
            var value = document.getElementById('htmlArea').value;
            // Check the active editing mode.
            if (editor.mode == 'wysiwyg') {
                // Insert HTML code.
                // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-insertHtml
                editor.insertHtml(value);
            } else
                alert('You must be in WYSIWYG mode!');
        }
        function InsertText() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.texto;
            var value = document.getElementById('txtArea').value;
            // Check the active editing mode.
            if (editor.mode == 'wysiwyg') {
                // Insert as plain text.
                // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-insertText
                editor.insertText(value);
            } else
                alert('You must be in WYSIWYG mode!');
        }
        function SetContents() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.texto;
            var value = document.getElementById('htmlArea').value;
            // Set editor content (replace current content).
            // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-setData
            editor.setData(value);
        }
        function GetContents() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.texto.getData();
            // Get editor content.
            // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-getData
            $("#texto").val(editor);
            toastr.options = {
                "debug": false,
                "onclick": null,
                "fadeIn": 300,
                "fadeOut": 100,
                "timeOut": 3000,
                "extendedTimeOut": 1000
            }
            toastr["success"]("Texto actualizado");
            $("#guardarTexto").attr('disabled', true);
        }
        function ExecuteCommand(commandName) {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.texto;
            // Check the active editing mode.
            if (editor.mode == 'wysiwyg') {
                // Execute the command.
                // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-execCommand
                editor.execCommand(commandName);
            } else
                alert('You must be in WYSIWYG mode!');
        }
        function CheckDirty() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.texto;
            // Checks whether the current editor content contains changes when compared
            // to the content loaded into the editor at startup.
            // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-checkDirty
            alert(editor.checkDirty());
        }
        function ResetDirty() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.texto;
            // Resets the "dirty state" of the editor.
            // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-resetDirty
            editor.resetDirty();
            alert('The "IsDirty" status was reset.');
        }
        function Focus() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.texto;
            // Focuses the editor.
            // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-focus
            editor.focus();
        }
    </script>
    <script>
        // Attaching event listeners to the global CKEDITOR object.
        // The instanceReady event is fired when an instance of CKEditor has finished its initialization.
        CKEDITOR.on('instanceReady', function (ev) {
            ShowMessage('Editor instance <em>' + ev.editor.name + '</em> was loaded.');
            // The editor is ready, so sample buttons can be displayed.
            document.getElementById('eButtons').style.display = 'block';
        });
        // Replace the <textarea id="editor1"> with a CKEditor instance.
        // A reference to the editor object is returned by CKEDITOR.replace() allowing you to work with editor instances.
        var editor = CKEDITOR.replace('texto', {
            height: 150
        });
        // Attaching event listeners to CKEditor instances.
        // Refer to https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html for a list of all available events.
        editor.on('focus', function (evt) {
            ShowMessage('Editor instance <em>' + this.name + '</em> <b>is focused</b>.');
        });
        editor.on('blur', function (evt) {
            ShowMessage('Editor instance <em>' + this.name + '</em> <b>lost focus</b>.');
        });
        // Helper variable to count the number of detected changes in CKEditor.
        var changesNum = 0;
        editor.on('change', function (evt) {
            ShowMessage('The number of changes in <em>' + this.name + '</em>: <b>' + ++changesNum + '</b>.');
        });
    </script>
    <script type="text/javascript">
    //Variables.
    var nomneclatura = "";

    $(document).ready(function ()
    {
        $("#numeroDocumento").attr('maxlength', '19');
        $("#numeroIngreso").attr('maxlength', '13');
        changeIdOrigen($("#tipoOrigen").val(), $("#idOrigen").val());
        hideexpediente();
        $("#numerosIngresos").hide();
        $("#CrearBoton").hide();
        $("#origenes").hide();
        $("#tipoOrigenes").hide();  
        $("#textoDocumento").hide();
        $("#textoCheck").hide();
        hideall();
    });
    CKEDITOR.instances.texto.on('change', function () {
        $("#guardarTexto").attr('disabled', false);
    });

    $("#check").change(function () {
        if ($("#check").val() == 1) {
            $("#textoDocumento").show(200);
        } else {
            $("#textoDocumento").hide(200);
        }
    });
     $("#idTipo").change(function ()
    {
        if ($("#idTipo").val() == "")
        {
            hideall();
            hideexpediente();
            $("#check").val(1);
            $("#origenes").hide(200);
            $("#tipoOrigenes").hide(200);
            $("#CrearBoton").hide(200);
            $("#tipoOrigen").get(0).selectedIndex = 0;
            $("#idOrigen").get(0).selectedIndex = 0;
            $("#numerosIngresos").hide(200);
            $("#textoDocumento").hide(200);
            $("#textoCheck").hide(200);
            $("#check").val(0);
        }
        else
        {
            if ($("#idOrigen").val() != "" && $("#idOrigen").val() != null)
            {
                if ($("#idTipo").val() == 3)
                {
                    showoficio();
                    $("#numerosIngresos").show(200);
                }
                else if ($("#idTipo").val() == 23)
                {
                    showoficiosin();
                }
                else
                {
                    showexpediente();
                    $("#numerosIngresos").show(200);
                }
            }
            $('#tipoOrigenes').show(200);
        }
    });
    $("#tipoOrigen").change(function () {
        if ($("#tipoOrigen").val() == "") {
            hideall();
            hideexpediente();
            $("#origenes").hide(200);
            $("#CrearBoton").hide(200);
            $("#idOrigen").get(0).selectedIndex = 0;
            $("#numerosIngresos").hide(200);
            $("#check").val(0);
        }
        else {
            $("#origenes").show(200);
        }
    });
    $("#idOrigen").change(function () {
        if ($("#idOrigen").val() == "") {
            hideall();
            hideexpediente();
            $("#check").val(0);
            $("#CrearBoton").hide(200);
            $("#numerosIngresos").hide(200);
        }
        else {
        
            
            var valIdTipo = $("#idTipo").val();
            if (valIdTipo == 3) {
                showalloficio();
                $("#numerosIngresos").show(200);
            }
            else if (valIdTipo == 23) {
        showall();
                showoficiosin();
            }
            else {
        showall();
                showexpediente();
                $("#numerosIngresos").show(200);
            }
            $("#CrearBoton").show(200);
        }
    });
    function showoficio() {
        $("#numerosIngresos").show(200);
        hideexpediente();
    }
    function hideexpediente() {
        $("#Expediente").hide(200);
        $("#partes").hide(200);
        $("#ubicaciones").hide(200);
        $("#textoDocumento").hide(200);
    }
    function showexpediente() {
        if ($("#idOrigen").val() == "") {
            $("#Expediente").hide(200);
            $("#partes").hide(200);
            $("#ubicaciones").hide(200);
            $("#textoCheck").hide(200);
        }
        else {
            $("#Expediente").show(200);
            $("#partes").show(200);
            $("#ubicaciones").show(200);
            $("#textoCheck").show(200);
        }
    }
    function showoficiosin() {
        hideexpediente();
        $("#numerosIngresos").hide(200);
    }
    function hideall() {
        $("#ubicaciones").hide(200);
        $("#numerosDocumentos").hide(200);
        $("#idEstados").hide(200);
        $("#fechas").hide(200);
        $("#asuntos").hide(200);
        $("#descripciones").hide(200);
        $("#observaciones").hide(200);
        $("#file").hide(200);
        $("#textoDocumento").hide(200);
        $("#textoCheck").hide(200);
    }
     function showalloficio() {
        $("#ubicaciones").hide(200);
        $("#numerosDocumentos").show(200);
        $("#idEstados").show(200);
        $("#fechas").show(200);
        $("#asuntos").show(200);
        $("#descripciones").show(200);
        $("#observaciones").show(200);
        $("#file").show(200);
        $("#textoDocumento").show(200);
        $("#textoCheck").show(200);
    }
    function showall() {
        $("#ubicaciones").show(200);
        $("#numerosDocumentos").show(200);
        $("#idEstados").show(200);
        $("#fechas").show(200);
        $("#asuntos").show(200);
        $("#descripciones").show(200);
        $("#observaciones").show(200);
        $("#file").show(200);
        $("#textoDocumento").show(200);
        $("#textoCheck").show(200);
    }
    $("#fecha").keydown(function () {
        event.preventDefault();
        }
    );
    $("#parte").keydown(function (e) {
        //109+189
        var reg = /EXP-AD-[a-zA-ZñÑ0-9]+-20(1[8-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])$/;
        var regPrev = /EXP-AD-[a-zA-ZñÑ0-9]+-/;
        var part = $('#parte').val();
        console.log(e.keyCode);
        console.log(e.key);
        if (reg.test(part)) {
            if (e.key == 'Backspace') {
                console.log('Mas.');
                $('#parte').val(part.slice(0, -6));
                event.preventDefault();
            }
            else {
                event.preventDefault();
            }
        }
        else {
            if (e.key > 64 && e.key < 90 && e.key != 'Backspace' && e.keyCode != 32) {
                event.preventDefault();
            }
            else {
                if ((e.key == 'Backspace' && $('#parte').val() == 'EXP-AD-') || e.keyCode == 32) {
                    event.preventDefault();
                }
            }
            if (regPrev.test(part + e.key)) {
                console.log(123);
                $('#parte').val(part + e.key + '2019');
                event.preventDefault();
            }
        }
    });
    //Cambiar los combos cuando se cambia el tipo de origen
    $("#tipoOrigen").change(function () {
        $("#idOrigen").empty();
        if ($("#tipoOrigen").val() != "" && $("#tipoOrigen").val() != null) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetTipoOrigen")',
                dataType: 'json',
                data: { id: $("#tipoOrigen").val() },
                success: function (origins) {
                    var another = origins.Data;
                    $("#idOrigen").append('<option value="">Seleccione una opción.</option>');
                    $.each(another, function (i, state) {
                        $("#idOrigen").append('<option value="' + state.Value + '">' + state.Text + '</option>');
                        onChangeId();
                    });
                },
                error: function (ex) {
                    alert('Seleccione una opción válida.' + ex);
                }
            }
            );
            return false;
        }
    });
    //Actualiza la variable nomenclatura
    function changeIdOrigen(tipoOrigen, idOrigen) {
        if (tipoOrigen == "5") {
            switch (idOrigen) {
                case "10": nomenclatura = "PSI-";
                    break;
                case "11": nomenclatura = "PRH-";
                    break;
                case "24": nomenclatura = "AAM-";
                    break;
                case "25": nomenclatura = "SAAM-";
                    break;
                case "26": nomenclatura = "AAAA-";
                    break;
                case "27": nomenclatura = "SAT-";
                    break;
                case "28": nomenclatura = "A-";
                    break;
                case "29": nomenclatura = "AAP-";
                    break;
                case "30": nomenclatura = "AAPRT-";
                    break;
                case "31": nomenclatura = "AAS-";
                    break;
                case "32": nomenclatura = "PAM-";
                    break;
                case "33": nomenclatura = "ALCM-";
                    break;
                case "34": nomenclatura = "AAI-";
                    break;
                case "35": nomenclatura = "AI-";
                    break;
                case "36": nomenclatura = "ABI-";
                    break;
                case "37": nomenclatura = "ABM-";
                    break;
                case "38": nomenclatura = "ACE-";
                    break;
                case "39": nomenclatura = "ACM-";
                    break;
                case "40": nomenclatura = "CMEA-";
                    break;
                case "41": nomenclatura = "PCD-";
                    break;
                case "42": nomenclatura = "CM-";
                    break;
                case "43": nomenclatura = "SC-";
                    break;
                case "44": nomenclatura = "AAAACC-";
                    break;
                case "45": nomenclatura = "PCS-";
                    break;
                case "46": nomenclatura = "ACC-";
                    break;
                case "47": nomenclatura = "PCFU-";
                    break;
                case "48": nomenclatura = "SCI-";
                    break;
                case "49": nomenclatura = "SCP-";
                    break;
                case "50": nomenclatura = "ADM-";
                    break;
                case "51": nomenclatura = "AD-";
                    break;
                case "52": nomenclatura = "SDC-";
                    break;
                case "53": nomenclatura = "ADCDR-";
                    break;
                case "54": nomenclatura = "PDO-";
                    break;
                case "55": nomenclatura = "PDS-";
                    break;
                case "56": nomenclatura = "PDSCEC-";
                    break;
                case "57": nomenclatura = "DGP-";
                    break;
                case "58": nomenclatura = "SGA-";
                    break;
                case "59": nomenclatura = "AGC-";
                    break;
                case "60": nomenclatura = "AGIRS-";
                    break;
                case "61": nomenclatura = "SGV-";
                    break;
                case "62": nomenclatura = "PH-";
                    break;
                case "63": nomenclatura = "PHM-";
                    break;
                case "64": nomenclatura = "AIM-";
                    break;
                case "65": nomenclatura = "SIS-";
                    break;
                case "66": nomenclatura = "AJCA-";
                    break;
                case "67": nomenclatura = "ALV-";
                    break;
                case "68": nomenclatura = "AMPZV-";
                    break;
                case "69": nomenclatura = "AM-";
                    break;
                case "70": nomenclatura = "SOIP-";
                    break;
                case "71": nomenclatura = "AOM-";
                    break;
                case "72": nomenclatura = "APC-";
                    break;
                case "73": nomenclatura = "AP-";
                    break;
                case "74": nomenclatura = "PPCI-";
                    break;
                case "75": nomenclatura = "PP-";
                    break;
                case "76": nomenclatura = "SPU-";
                    break;
                case "77": nomenclatura = "APG-";
                    break;
                case "78": nomenclatura = "PRE-";
                    break;
                case "79": nomenclatura = "SP-";
                    break;
                case "80": nomenclatura = "SO-";
                    break;
                case "81": nomenclatura = "SM-";
                    break;
                case "82": nomenclatura = "PSMCV-";
                    break;
                case "83": nomenclatura = "SPSA-";
                    break;
                case "84": nomenclatura = "SSA-";
                    break;
                case "85": nomenclatura = "PSJ-";
                    break;
                case "86": nomenclatura = "SSISC-";
                    break;
                case "87": nomenclatura = "SSISCT-";
                    break;
                case "88": nomenclatura = "TM-";
                    break;
                case "89": nomenclatura = "ST-";
                    break;
                case "90": nomenclatura = "VA-";
                    break;
                default: nomenclatura = "PMM-";
                    break;
            }
        }
        else {
            nomenclatura = "PMM-";
        }
    }
    $("#idOrigen").change(function () {
        onChangeId();
    });
    //Limpia el campo del numero de documento y pone el placeholder dependiento del origen.
    function onChangeId() {
        changeIdOrigen($("#tipoOrigen").val(), $("#idOrigen").val());
        $('#numeroDocumento').val('');
        $('#numeroDocumento').attr('placeholder', 'MA-' + nomenclatura + '####-2019');
    };
    //Cuando se pone el click escribe la nomenclatura
    $("#parte").click(function () {
        $('#parte').val('EXP-AD-');
    });
    //Cuando se pone el click escribe la nomenclatura
    $("#numeroDocumento").click(function () {
        $('#numeroDocumento').val('MA-' + nomenclatura);
    });
    //Si se encuentra vacio el numero de documento
    $("#numeroDocumento").change(function () {
        if ($("#numeroDocumento").val().empty) {
            $('#numeroDocumento').val('MA-' + nomenclatura);
        }
    });
    //Maneja el campo del numero de documento
    $("#numeroDocumento").keydown(function (e) {
        var reg = /(MA-[a-zñA-ZÑ]{1,6}-[0-9]{4}-\b20(1[8-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])\b)$/;
        var regPrev = /(MA-[a-zñA-ZÑ]{1,6}-[0-9]{4})/;
        var numDoc = $('#numeroDocumento').val();
        console.log(e.keyCode);
        console.log(e.key);
        if (reg.test(numDoc)) {
            console.log('Entró.');
            if (e.key == 'Backspace') {
                console.log('Mas.');
                $('#numeroDocumento').val(numDoc.slice(0, -6));
                event.preventDefault();
            }
            else {
                event.preventDefault();
            }
        }
        else {
            if (e.key != 1 && e.key != 2 && e.key != 3 && e.key != 4 && e.key != 5 && e.key != 6 && e.key != 7 && e.key != 8 && e.key != 9 && e.key != 0 && e.key != 'Backspace' && e.keyCode != 32) {
                event.preventDefault();
            }
            else {
                if ((e.key == 'Backspace' && $('#numeroDocumento').val() == 'MA-' + nomenclatura) || e.keyCode == 32) {
                    event.preventDefault();
                }
            }
            if (regPrev.test(numDoc + e.key)) {
                console.log(123);
                $('#numeroDocumento').val(numDoc + e.key + '-2019');
                event.preventDefault();
            }
        }
    });
    //Cuando se pone el click escribe las iniciales
    $("#numeroIngreso").click(function () {
        $('#numeroIngreso').val('N.I.');
    });
    //Si se encuentra vacio el numero de documento
    $("#numeroIngreso").change(function () {
        if ($("#numeroIngreso").val().empty) {
            $('#numeroIngreso').val('N.I.');
        }
    });
    //Maneja el campo del numero de ingreso
    $("#numeroIngreso").keydown(function (e) {
        var reg = /(N.I.[0-9]{4}-\b20(1[8-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9])\b)$/;
        var regPrev = /N.I.[0-9]{4}/;
        var numDoc = $('#numeroIngreso').val();
        console.log(e.keyCode);
        console.log(e.key);
        if (reg.test(numDoc)) {
            console.log('Entró.');
            if (e.key == 'Backspace') {
                $('#numeroIngreso').val(numDoc.slice(0, -6));
                event.preventDefault();
            }
            else {
                event.preventDefault();
            }
        }
        else {
            if (e.key != 1 && e.key != 2 && e.key != 3 && e.key != 4 && e.key != 5 && e.key != 6 && e.key != 7 && e.key != 8 && e.key != 9 && e.key != 0 && e.key != 'Backspace' && e.keyCode != 32) {
                event.preventDefault();
            }
            else {
                if ((e.key == 'Backspace' && $('#numeroIngreso').val() == 'N.I.') || e.keyCode == 32) {
                    event.preventDefault();
                }
            }
            if (regPrev.test(numDoc + e.key)) {
                console.log(123);
                $('#numeroIngreso').val(numDoc + e.key + '-2019');
                event.preventDefault();
            }
        }
    });
    </script>
</body>

</html>