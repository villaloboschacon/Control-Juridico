@model PagedList.IPagedList<BackEnd.Model.Persona>
@using PagedList.Mvc;
@{
    ViewBag.Title = "Index";
}
<!doctype html>
<html lang="es">
<head>
    <script src="https://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"></script>

    <script src="https://cdn.ckeditor.com/4.11.4/standard-all/ckeditor.js"></script>

    @*
        MessageToast
    *@
    <script src="~/Content/Toast/toastr.js"></script>
    <link href="~/Content/Toast/toastr.css" rel="stylesheet" />
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
    <script src="~/Content/Toast/toastrsample.js"></script>

</head>
<body>
    <div class="title">Personas Físicas</div>
    <div class="container" style="margin-top:20px">
        @using (Html.BeginForm("Index", "PersonaFisica", FormMethod.Get))
        {
            <div class="widget" style="height:100px;">
                <div class="title">
                    <span class="form-inline">
                        @{ List<SelectListItem> searchListItem = new List<SelectListItem>();
                            searchListItem.Add(new SelectListItem { Text = "Cédula", Value = "Cédula" });
                            searchListItem.Add(new SelectListItem { Text = "Nombre Completo", Value = "Nombre Completo" });
                            searchListItem.Add(new SelectListItem { Text = "Correo Electrónico", Value = "Correo Electrónico" });

                        }
                        @Html.DropDownList("sOption", new SelectList(searchListItem, "Value", "Text"), "Opciones de Búsqueda", htmlAttributes: new { @class = "form-control", @style = "width:205px;", @onchange = "Limpiar()", @id = "dropList" })
                        @Html.TextBox("sSearch", "", new { @class = "form-control", autocomplete = "off" })
                        <button id="buscarButton" type="submit" class="btn btn-default" value="Buscar" style="color:black; font-size:14px;"> <i class="fa fa-search" aria-hidden="true"></i> Buscar </button>
                    </span>
                </div>
            </div>
        }

        <table class="table table-bordered" id="table_personas">
            <tr>
                <th>
                    @* @Html.ActionLink("Cédula", "Index", new { sortOrder = ViewBag.Cedula })*@
                    Cédula
                </th>
                <th>
                    Nombre Completo
                </th>
                <th>Correo</th>
            </tr>
            @if (Model.Count() == 0)
            {
                <tr>
                    <td align="center" colspan="8">No se encontraron coincidencias</td>
                </tr>
            }
            else
            {
                foreach (var item in Model)
                {
                    <tr>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.idPersona)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.cedula)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.nombreCompleto)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.correo)
                        </td>
                    </tr>
                }
            }
        </table>
        <div>
            <a href="#" id="btnEdit" class="btnEdit" onclick="Crear()" data-toggle="modal" data-target="#crearModal">Crear Persona</a>
        </div>
        <br />
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, pageSize = Model.PageSize, sSearch = ViewBag.search, sOption = ViewBag.option, sSearchFecha = ViewBag.finalDate, pageReferencias = ViewBag.pageReferencias }))
        <input type="hidden" id="idPersona" />
        <br />
    </div>

    <div class="modal fade" id="modalArchivar">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <a href="#" class="close" data-dismiss="modal">&times;</a>
                    <h3 class="modal-title">Eliminar Persona</h3>
                </div>
                <div class="modal-body">
                    <h4>Esta seguro que desea eliminar esta persona? </h4>

                    @*<div style="text-align:center;display:none" id="loaderDiv">
                            <img src="~/Content/InternetSlowdown_Day.gif" width="150" />
                        </div>*@

                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-default" data-dismiss="modal">Cancelar</a>
                    <a href="#" class="btn btn-default" onclick="Archivar()">Confirmar</a>
                </div>

            </div>

        </div>

    </div>

    <div id="editarModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="editarModal" aria-hidden="true" style="position: fixed" data-keyboard="false" data-backdrop="static"></div>
    <div id="crearModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="crearModal" aria-hidden="true" style="position: fixed" data-keyboard="false" data-backdrop="static"></div>
    <div id="detalleModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="detalleModal" aria-hidden="true" style="position: fixed" data-keyboard="false" data-backdrop="static"></div>

    <div id="contextMenu" class="dropdown clearfix">
        <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu" style="display:block;position:static;margin-bottom:5px;">
            <li>
                <a tabindex="-1" href="#" onclick="Details(getInd())" data-value="getInd()" data-toggle="modal" data-target="#detalleModal">Ver detalles</a>
            </li>
            <li class="divider"></li>
            <li>
                <a tabindex="-1" href="#" onclick="Edit(getInd())" data-value="getInd()" data-toggle="modal" data-target="#editarModal">Editar</a>
            </li>
            <li>
                <a href="#" onclick="Confirmar(getInd())">Eliminar</a>
            </li>
        </ul>
    </div>

    <style>
        #contextMenu {
            position: absolute;
            display: none;
            background: lightblue;
            z-index: 1000;
        }

        .wrap {
            width: 90%;
            display: block;
            margin: 0 auto;
        }

        table {
            border: 1px solid rgba(221, 221, 221, 1);
        }

        tr:nth-child(even) {
            background: #F5F5F5
        }

        tr {
            position: relative;
        }

            tr:hover {
                background: #c9e8f7;
                position: relative;
            }
    </style>



    <script>

    var ind = 0;
    $(this).mousedown(function (e) {
        if (e.which == 2) {
            alert('jaja');
            var rows = $('tr', table_documentos);
            ind = rows.eq($(this).index()).find("td:first").text();
            console(ind);
            return rows.eq($(this).index()).find("td:first").text();
        }
    });
    $('#table_personas').click(function () {
        $(this).addClass('highlight').siblings().removeClass('highlight');
        //do your stuff, you can use $(this) to get current cell
    });

    $('#table_personas').find('tr').click(function (e) {
        var rows = $('tr', table_personas);
        ind = rows.eq($(this).index()).find("td:first").text();

        return rows.eq($(this).index()).find("td:first").text();
    });
    $vars = 0;
    $(function () {
        var $contextMenu = $("#contextMenu");
        $("body").on("contextmenu", "table tr", function (e) {
            var rows = $('tr', table_personas);
            ind = rows.eq($(this).index()).find("td:first").text();
            ind = ind.replace(/ /g, "");
            ind = ind.replace(/\s+/g, "");
            console.log(ind);
            $vars = ind;
            $contextMenu.css({
                display: "block",
                left: e.pageX,
                top: e.pageY
            });
            return false;
        });
        $('html').click(function () {
            $contextMenu.hide();
        });
    });
    function getInd() {
        console.log($vars);
        return $vars;
    };

    function Limpiar() {
        $('#sSearch').val("")
    }

   $(document).ready(function () {
        if ('@TempData["message"]' == "success") {
            toastr.options = {
                "debug": false,
                "onclick": null,
                "fadeIn": 300,
                "fadeOut": 100,
                "timeOut": 3000,
                "extendedTimeOut": 1000
            }

            var d = '@TempData["action"]';
            toastr["success"](d, "Persona agregada exitosamente","exitosamente");
        }
        else if ('@TempData["message"]' == "error") {
            toastr.options = {
                "debug": false,
                "onclick": null,
                "fadeIn": 300,
                "fadeOut": 100,
                "timeOut": 3000,
                "extendedTimeOut": 1000
            }
            toastr["error"]("Error al crear la Persona.");
        }
    });



    function Crear() {
        var url = '@Url.Action("Crear")';
        $.ajax({
            url: url,
            datatype: "json",
            type: "post",
            contenttype: 'application/json; charset=utf-8',
            async: true,
            success: function (data) {
                $("#crearModal").html(data);
            },
            error: function (xhr) {
                alert('Error a la hora de abrir el modal.');
            }
        });
    }

    function Details(idpersona) {
        var url = '@Url.Action("Detalles")';
        var myId = idpersona;
        $.ajax({
            url: url,
            datatype: "json",
            type: "post",
            data: {
                'id': idpersona
            },
            contenttype: 'application/json; charset=utf-8',
            async: true,
            success: function (data) {
                $("#detalleModal").html(data);
            },
            error: function (xhr) {
                alert('error');
            }
        });
    }

    function Edit(idpersona) {
        var url = '@Url.Action("Editar")';
        var myId = idpersona;
        $.ajax({
            url: url,
            datatype: "json",
            type: "post",
            data: {
                'id': idpersona
            },
            contenttype: 'application/json; charset=utf-8',
            async: true,
            success: function (data) {
                $("#editarModal").html(data);
            },
            error: function (xhr) {
                alert('error');
            }
        });
    }
    </script>
    <script type="text/javascript">
    $(function () {
        // Initialize numeric spinner input boxes
        //$(".numeric-spinner").spinedit();
        // Initialize modal dialog
        // attach modal-container bootstrap attributes to links with .modal-link class.
        // when a link is clicked with these attributes, bootstrap will display the href content in a modal dialog.
        $('body').on('click', '.modal-link', function (e) {
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');
        });
        // Attach listener to .modal-close-btn's so that when the button is pressed the modal dialog disappears
        $('body').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });
        //clear modal cache, so that new content can be loaded
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
        $('#CancelModal').on('click', function () {
            return false;
        });
    });

        var Confirmar = function (idPersona) {

        $("#idPersona").val(idPersona);
        $('#modalArchivar').modal('show');
       // $("#myModal").show();// show();//('show');

    }

    var Archivar = function () {
        var url = '@Url.Action("Eliminar")';
        var myId = $("#idPersona").val();
        $.ajax({
            url: url,
            datatype: "json",
            type: "post",
            data: {
                'id': myId
            },
            success: function (result) {
                $("#modalArchivar").modal("hide");
                location.reload();

            }

        })

    }
    </script>

    <script>
        // Helper function to display messages below CKEditor.
        function ShowMessage(msg) {
            document.getElementById('eMessage').innerHTML = msg;
        }
        function InsertHTML() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.editor1;
            var value = document.getElementById('htmlArea').value;
            // Check the active editing mode.
            if (editor.mode == 'wysiwyg') {
                // Insert HTML code.
                // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-insertHtml
                editor.insertHtml(value);
            } else
                alert('You must be in WYSIWYG mode!');
        }
        function InsertText() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.editor1;
            var value = document.getElementById('txtArea').value;
            // Check the active editing mode.
            if (editor.mode == 'wysiwyg') {
                // Insert as plain text.
                // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-insertText
                editor.insertText(value);
            } else
                alert('You must be in WYSIWYG mode!');
        }
        function SetContents() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.editor1;
            var value = document.getElementById('htmlArea').value;
            // Set editor content (replace current content).
            // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-setData
            editor.setData(value);
        }
        function GetContents() {
            // Get the editor instance that you want to interact with.
            //var editor = CKEDITOR.instances.editor1;
            // Get editor content.
            // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-getData
            //alert(editor.getData());
        }
        function ExecuteCommand(commandName) {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.editor1;
            // Check the active editing mode.
            if (editor.mode == 'wysiwyg') {
                // Execute the command.
                // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-execCommand
                editor.execCommand(commandName);
            } else
                alert('You must be in WYSIWYG mode!');
        }
        function CheckDirty() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.editor1;
            // Checks whether the current editor content contains changes when compared
            // to the content loaded into the editor at startup.
            // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-checkDirty
            alert(editor.checkDirty());
        }
        function ResetDirty() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.editor1;
            // Resets the "dirty state" of the editor.
            // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-resetDirty
            editor.resetDirty();
            alert('The "IsDirty" status was reset.');
        }
        function Focus() {
            // Get the editor instance that you want to interact with.
            var editor = CKEDITOR.instances.editor1;
            // Focuses the editor.
            // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-focus
            editor.focus();
        }
    </script>
    <script>
        // Attaching event listeners to the global CKEDITOR object.
        // The instanceReady event is fired when an instance of CKEditor has finished its initialization.
        CKEDITOR.on('instanceReady', function (ev) {
            ShowMessage('Editor instance <em>' + ev.editor.name + '</em> was loaded.');
            // The editor is ready, so sample buttons can be displayed.
            document.getElementById('eButtons').style.display = 'block';
        });
                    // Replace the <textarea id="editor1"> with a CKEditor instance.
                    // A reference to the editor object is returned by CKEDITOR.replace() allowing you to work with editor instances.
                    //var editor = CKEDITOR.replace('editor1', {
                    //    height: 150
                    //});
                    // Attaching event listeners to CKEditor instances.
                    // Refer to https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html for a list of all available events.
                    //editor.on('focus', function (evt) {
                    //    ShowMessage('Editor instance <em>' + this.name + '</em> <b>is focused</b>.');
                    //});
                    //editor.on('blur', function (evt) {
                    //    ShowMessage('Editor instance <em>' + this.name + '</em> <b>lost focus</b>.');
                    //});
                    //// Helper variable to count the number of detected changes in CKEditor.
                    //var changesNum = 0;
                    //editor.on('change', function (evt) {
                    //    ShowMessage('The number of changes in <em>' + this.name + '</em>: <b>' + ++changesNum + '</b>.');
                    //});
    </script>
</body>

</html>
